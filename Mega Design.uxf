<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1064</x>
      <y>252</y>
      <w>231</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Node
--
- nodeData : int
- nodePointer : IntNode*
--
+ getNodeData()
+ getNodePointer : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : init
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1442</x>
      <y>252</y>
      <w>203</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromindex(int index) : int
+ getSize() : int

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1393</x>
      <y>434</y>
      <w>343</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ Array() : constructor
+ Array(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() : int
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1309</x>
      <y>476</y>
      <w>98</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1043</x>
      <y>455</y>
      <w>273</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData() : Void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1288</x>
      <y>308</y>
      <w>168</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>220.0;20.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1484</x>
      <y>644</y>
      <w>294</w>
      <h>189</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(constList&lt;Type&gt;&amp;source): copy constructor
+~List&lt;Type&gt;() : destructor

+addAtIndex(int index, Type value) : void
+addFront(Type value): void
+addEnd(Type value): void
+remove(int index) : Type
+setAtIndex(int index, Type data) : Type
+getFromIndex(int index, Type data) : Type
+contains(Type data) : bool
+getSize(const) : int
+getFront() const : Node&lt;Type&gt; *
+getEnd() const : Node&lt;Type&gt; *

bg=magenta
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1057</x>
      <y>672</y>
      <w>273</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData() : Void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1323</x>
      <y>742</y>
      <w>175</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1050</x>
      <y>861</y>
      <w>336</w>
      <h>203</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : int
- previous : biDirectionNode&lt;Type&gt; *
- next : biDirectionNode&lt;Type&gt; *
--

+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; 
	* previous, BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData() : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void
+ getNextNode(BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1162</x>
      <y>805</y>
      <w>21</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1582</x>
      <y>910</y>
      <w>273</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>/DOUBLYLINKEDLIST&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non Virtual Methods
+ getSize() const : int
+ getFront() : const : BiDirectionalNode&lt;Type&gt; *
+getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+add(Type value)
+ remove(int)

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1379</x>
      <y>952</y>
      <w>217</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>290.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1463</x>
      <y>1176</y>
      <w>168</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type. *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue(): Type
+ peek() : Type

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1533</x>
      <y>1071</y>
      <w>189</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>250.0;10.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1841</x>
      <y>1176</y>
      <w>231</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>Moddel :: CircularlyLinkedList&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type. *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+add(Type) : void
+ remove(int index) : Type

+addAtIndex(int index, Type data) : void

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1652</x>
      <y>1218</y>
      <w>182</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>Model :: Stack
--
-front: BiDirectionalNode&lt;Type. *
-end: BiDirectionalNode&lt;Type&gt; *
-size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ push(Type data) : void
+ pop(): Type
+ peek() : Type

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1722</x>
      <y>1071</y>
      <w>21</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1750</x>
      <y>1071</y>
      <w>189</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;250.0;150.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>357</x>
      <y>210</y>
      <w>343</w>
      <h>203</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData: Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; * 
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ BinarySerachTreeNode() : cosntructor
+ BinarySearchTreeNode(Type data) : cnstructor

+ getRootPointer() :BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; * 
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>483</x>
      <y>406</y>
      <w>35</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>455</y>
      <w>301</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree &lt;Type&gt;
--
- root : BinarySearchtreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- complete :bool (inherited)
- balanced : bool (inherited)
--
+BinarySearchTree() : constructor
+ ~BinarySearchTree(): destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

-calculatreSize(BinarySearchTreeNode&lt;Type&gt; *) : int

- inOrderTraversal(binarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinaryearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinaryearchTreeNode&lt;Type&gt; *) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>686</x>
      <y>455</y>
      <w>301</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>/AbstractClass/
--
- size : int
- height : int
- complete :bool
- balanced : bool
-
+ Tree() : construcctor
+ ~Tree() : destructor
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ is Balanced() : bool

+ setSize(int sie) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool blanced): void

- inOrderTraversal() : void
- preOrderTraversal() : void
- postOrderTraversal() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>644</x>
      <y>560</y>
      <w>56</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>693</x>
      <y>294</y>
      <w>385</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;530.0;10.0</additional_attributes>
  </element>
</diagram>
